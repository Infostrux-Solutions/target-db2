### A CI workflow template that runs linting and python testing
### TODO: Modify as needed or as desired.

name: Test target-db2

on: [push]

jobs:
  tests:
    name: "Integration Testing"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: "With Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Print Python Version"
        run: python --version
      - name: "Set up container environment"
        run: docker compose -f docker-compose-ci.yaml up db2 -d --wait
      - name: "Sleep 300 to let Db2 container to finish initializing"
        run: sleep 300
      - name: "Run Tests"
        run: docker compose -f docker-compose-ci.yaml run target


  # pytest:
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ["3.8"]


  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: "Set up container environment"
  #     run: docker compose -f docker-compose-ci.yaml up -d --wait db2
  #   - name: "Print docker container ls"
  #     run: docker container ls
  #   - name: "Print docker container inspect db2"
  #     run: docker container inspect target-db2-db2-1
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install Poetry
  #     run: |
  #       python -m pip install --upgrade pip
  #       pipx install poetry
  #   - name: Install dependencies
  #     run: |
  #       poetry env use ${{ matrix.python-version }}
  #       poetry install
  #   - name: Test with pytest
  #     run: |
  #       poetry run pytest
